
#ifndef REGS_MPIC_H
#define REGS_MPIC_H

#define MPIC128_VIR0_VALUE		reg_field(31,0x14) | reg_field(23,0x50)
#define MPIC128_REVID_VALUE		reg_field(31,0xF)

#define VP0			(0x0FC10000)
#define DST0		(0x0FC10010)
#define CTP0		(0x0FC20080)
#define CTP1		(0x0FC21080)
#define CTP2		(0x0FC22080)
#define CTP3		(0x0FC23080)
#define WAI0		(0x0FC20090)
#define WAI1		(0x0FC21090)
#define WAI2		(0x0FC22090)
#define WAI3		(0x0FC23090)
#define NCIAR0		(0x0FC200A0)
#define NCIAR1		(0x0FC210A0)
#define NCIAR2		(0x0FC220A0)
#define NCIAR3		(0x0FC230A0)
#define NCEOI0		(0x0FC200B0)
#define NCEOI1		(0x0FC210B0)
#define NCEOI2		(0x0FC220B0)
#define NCEOI3		(0x0FC230B0)
#define CIAR0		(0x0FC200C0)
#define CIAR1		(0x0FC210C0)
#define CIAR2		(0x0FC220C0)
#define CIAR3		(0x0FC230C0)
#define CEOI0		(0x0FC200D0)
#define CEOI1		(0x0FC210D0)
#define CEOI2		(0x0FC220D0)
#define CEOI3		(0x0FC230D0)
#define IAR0		(0x0FC200E0)
#define IAR1		(0x0FC210E0)
#define IAR2		(0x0FC220E0)
#define IAR3		(0x0FC230E0)
#define EOI0		(0x0FC200F0)
#define EOI1		(0x0FC210F0)
#define EOI2		(0x0FC220F0)
#define EOI3		(0x0FC230F0)
#define FRG0		(0x0FC01000)
#define GCF0		(0x0FC01020)
#define VITC		(0x0FC01040)
#define VRID		(0x0FC01050)
#define REVID		(0x0FC01070)
#define VIR0		(0x0FC01080)
#define PINI		(0x0FC01090)
#define IVP0		(0x0FC010A0)
#define IVP1		(0x0FC010B0)
#define IVP2		(0x0FC010C0)
#define IVP3		(0x0FC010D0)
#define SPV			(0x0FC010E0)
#define TFR			(0x0FC010F0)
#define TCC0		(0x0FC01100)
#define TCC1		(0x0FC01140)
#define TCC2		(0x0FC01180)
#define TCC3		(0x0FC011C0)
#define TBC0		(0x0FC01110)
#define TBC1		(0x0FC01150)
#define TBC2		(0x0FC01190)
#define TBC3		(0x0FC011D0)
#define TVP0		(0x0FC01120)
#define TVP1		(0x0FC01160)
#define TVP2		(0x0FC011A0)
#define TVP3		(0x0FC011E0)
#define TDST0		(0x0FC01130)
#define TDST1		(0x0FC01170)
#define TDST2		(0x0FC011B0)
#define TDST3		(0x0FC011F0)

/* Values template for tests */

#define MPIC128_R_BIT				(0x80000000)
/* MPIC RESET VALUES */
#define MPIC128_VP0_VALUE		reg_field(8,1) | reg_field(0,1)
#define MPIC128_DST0_VALUE	0x00000000
#define MPIC128_CTP0_VALUE	0x0000000F
#define MPIC128_CTP1_VALUE	0x0000000F
#define MPIC128_CTP2_VALUE	0x0000000F
#define MPIC128_CTP3_VALUE	0x0000000F
#define MPIC128_WAI0_VALUE	0xFFFFFFFF
#define MPIC128_WAI1_VALUE	0xFFFFFFFF
#define MPIC128_WAI2_VALUE	0xFFFFFFFF
#define MPIC128_WAI3_VALUE	0xFFFFFFFF
#define MPIC128_SPV_VALUE		reg_field(31,0xFF)
#define MPIC128_NCIAR0_VALUE	MPIC128_SPV_VALUE
#define MPIC128_NCIAR1_VALUE	MPIC128_SPV_VALUE
#define MPIC128_NCIAR2_VALUE	MPIC128_SPV_VALUE
#define MPIC128_NCIAR3_VALUE	MPIC128_SPV_VALUE
#define MPIC128_NCEOI0_VALUE	0x00000000
#define MPIC128_NCEOI1_VALUE	0x00000000
#define MPIC128_NCEOI2_VALUE	0x00000000
#define MPIC128_NCEOI3_VALUE	0x00000000
#define MPIC128_CIAR0_VALUE		MPIC128_SPV_VALUE
#define MPIC128_CIAR1_VALUE		MPIC128_SPV_VALUE
#define MPIC128_CIAR2_VALUE		MPIC128_SPV_VALUE
#define MPIC128_CIAR3_VALUE		MPIC128_SPV_VALUE
#define MPIC128_CEOI0_VALUE		0x00000000
#define MPIC128_CEOI1_VALUE		0x00000000
#define MPIC128_CEOI2_VALUE		0x00000000
#define MPIC128_CEOI3_VALUE		0x00000000
#define MPIC128_IAR0_VALUE		MPIC128_SPV_VALUE
#define MPIC128_IAR1_VALUE		MPIC128_SPV_VALUE
#define MPIC128_IAR2_VALUE		MPIC128_SPV_VALUE
#define MPIC128_IAR3_VALUE		MPIC128_SPV_VALUE
#define MPIC128_EOI0_VALUE		0x00000000
#define MPIC128_EOI1_VALUE		0x00000000
#define MPIC128_EOI2_VALUE		0x00000000
#define MPIC128_EOI3_VALUE		0x00000000
#define MPIC128_FRG0_VALUE		reg_field(31,2) | reg_field(23,3) | reg_field(15,127)
#define MPIC128_GCF0_VALUE		reg_field(31,0xF)
#define MPIC128_VITC_VALUE		reg_field(31,0x10) | reg_field(23,0x10)
#define MPIC128_VRID_VALUE		0x00000000
#define MPIC128_PINI_VALUE		0x00000000
#define MPIC128_IVP0_VALUE		reg_field(0,0x1)
#define MPIC128_IVP1_VALUE		reg_field(0,0x1)
#define MPIC128_IVP2_VALUE		reg_field(0,0x1)
#define MPIC128_IVP3_VALUE		reg_field(0,0x1)
#define MPIC128_TFR_VALUE		0x00000000
#define MPIC128_TCC0_VALUE		0x00000000
#define MPIC128_TCC1_VALUE		0x00000000
#define MPIC128_TCC2_VALUE		0x00000000
#define MPIC128_TCC3_VALUE		0x00000000
#define MPIC128_TBC0_VALUE		reg_field(0,0x1)
#define MPIC128_TBC1_VALUE		reg_field(0,0x1)
#define MPIC128_TBC2_VALUE		reg_field(0,0x1)
#define MPIC128_TBC3_VALUE		reg_field(0,0x1)
#define MPIC128_TVP0_VALUE		reg_field(0,0x1)
#define MPIC128_TVP1_VALUE		reg_field(0,0x1)
#define MPIC128_TVP2_VALUE		reg_field(0,0x1)
#define MPIC128_TVP3_VALUE		reg_field(0,0x1)
#define MPIC128_TDST0_VALUE		0x00000000
#define MPIC128_TDST1_VALUE		0x00000000
#define MPIC128_TDST2_VALUE		0x00000000
#define MPIC128_TDST3_VALUE		0x00000000

#define MPIC128_VPx_REGS_COUNT    128
#define MPIC128_DSTx_REGS_COUNT   128
#define MPIC128_REGS_COUNT_4      4

BEGIN_ENUM( MPIC128x_REG )
#define                 MPIC128x_VP(x)		(0x00010000 + (0x0020*(x))) // MPIC Vector/Priority Register
DECLARE_ENUM_VAL(		MPIC128x_VP0,		MPIC128x_VP(0) )
DECLARE_ENUM_VAL(		MPIC128x_VP1,		MPIC128x_VP(1) )
DECLARE_ENUM_VAL(		MPIC128x_VP2,		MPIC128x_VP(2) )
DECLARE_ENUM_VAL(		MPIC128x_VP3,		MPIC128x_VP(3) )
DECLARE_ENUM_VAL(		MPIC128x_VP4,		MPIC128x_VP(4) )
DECLARE_ENUM_VAL(		MPIC128x_VP5,		MPIC128x_VP(5) )
DECLARE_ENUM_VAL(		MPIC128x_VP6,		MPIC128x_VP(6) )
DECLARE_ENUM_VAL(		MPIC128x_VP7,		MPIC128x_VP(7) )
DECLARE_ENUM_VAL(		MPIC128x_VP8,		MPIC128x_VP(8) )
DECLARE_ENUM_VAL(		MPIC128x_VP9,		MPIC128x_VP(9) )
DECLARE_ENUM_VAL(		MPIC128x_VP10,		MPIC128x_VP(10) )
DECLARE_ENUM_VAL(		MPIC128x_VP11,		MPIC128x_VP(11) )
DECLARE_ENUM_VAL(		MPIC128x_VP12,		MPIC128x_VP(12) )
DECLARE_ENUM_VAL(		MPIC128x_VP13,		MPIC128x_VP(13) )
DECLARE_ENUM_VAL(		MPIC128x_VP14,		MPIC128x_VP(14) )
DECLARE_ENUM_VAL(		MPIC128x_VP15,		MPIC128x_VP(15) )
DECLARE_ENUM_VAL(		MPIC128x_VP16,		MPIC128x_VP(16) )
DECLARE_ENUM_VAL(		MPIC128x_VP17,		MPIC128x_VP(17) )
DECLARE_ENUM_VAL(		MPIC128x_VP18,		MPIC128x_VP(18) )
DECLARE_ENUM_VAL(		MPIC128x_VP19,		MPIC128x_VP(19) )
DECLARE_ENUM_VAL(		MPIC128x_VP20,		MPIC128x_VP(20) )
DECLARE_ENUM_VAL(		MPIC128x_VP21,		MPIC128x_VP(21) )
DECLARE_ENUM_VAL(		MPIC128x_VP22,		MPIC128x_VP(22) )
DECLARE_ENUM_VAL(		MPIC128x_VP23,		MPIC128x_VP(23) )
DECLARE_ENUM_VAL(		MPIC128x_VP24,		MPIC128x_VP(24) )
DECLARE_ENUM_VAL(		MPIC128x_VP25,		MPIC128x_VP(25) )
DECLARE_ENUM_VAL(		MPIC128x_VP26,		MPIC128x_VP(26) )
DECLARE_ENUM_VAL(		MPIC128x_VP27,		MPIC128x_VP(27) )
DECLARE_ENUM_VAL(		MPIC128x_VP28,		MPIC128x_VP(28) )
DECLARE_ENUM_VAL(		MPIC128x_VP29,		MPIC128x_VP(29) )
DECLARE_ENUM_VAL(		MPIC128x_VP30,		MPIC128x_VP(30) )
DECLARE_ENUM_VAL(		MPIC128x_VP31,		MPIC128x_VP(31) )
DECLARE_ENUM_VAL(		MPIC128x_VP32,		MPIC128x_VP(32) )
DECLARE_ENUM_VAL(		MPIC128x_VP33,		MPIC128x_VP(33) )
DECLARE_ENUM_VAL(		MPIC128x_VP34,		MPIC128x_VP(34) )
DECLARE_ENUM_VAL(		MPIC128x_VP35,		MPIC128x_VP(35) )
DECLARE_ENUM_VAL(		MPIC128x_VP36,		MPIC128x_VP(36) )
DECLARE_ENUM_VAL(		MPIC128x_VP37,		MPIC128x_VP(37) )
DECLARE_ENUM_VAL(		MPIC128x_VP38,		MPIC128x_VP(38) )
DECLARE_ENUM_VAL(		MPIC128x_VP39,		MPIC128x_VP(39) )
DECLARE_ENUM_VAL(		MPIC128x_VP40,		MPIC128x_VP(40) )
DECLARE_ENUM_VAL(		MPIC128x_VP41,		MPIC128x_VP(41) )
DECLARE_ENUM_VAL(		MPIC128x_VP42,		MPIC128x_VP(42) )
DECLARE_ENUM_VAL(		MPIC128x_VP43,		MPIC128x_VP(43) )
DECLARE_ENUM_VAL(		MPIC128x_VP44,		MPIC128x_VP(44) )
DECLARE_ENUM_VAL(		MPIC128x_VP45,		MPIC128x_VP(45) )
DECLARE_ENUM_VAL(		MPIC128x_VP46,		MPIC128x_VP(46) )
DECLARE_ENUM_VAL(		MPIC128x_VP47,		MPIC128x_VP(47) )
DECLARE_ENUM_VAL(		MPIC128x_VP48,		MPIC128x_VP(48) )
DECLARE_ENUM_VAL(		MPIC128x_VP49,		MPIC128x_VP(49) )
DECLARE_ENUM_VAL(		MPIC128x_VP50,		MPIC128x_VP(50) )
DECLARE_ENUM_VAL(		MPIC128x_VP51,		MPIC128x_VP(51) )
DECLARE_ENUM_VAL(		MPIC128x_VP52,		MPIC128x_VP(52) )
DECLARE_ENUM_VAL(		MPIC128x_VP53,		MPIC128x_VP(53) )
DECLARE_ENUM_VAL(		MPIC128x_VP54,		MPIC128x_VP(54) )
DECLARE_ENUM_VAL(		MPIC128x_VP55,		MPIC128x_VP(55) )
DECLARE_ENUM_VAL(		MPIC128x_VP56,		MPIC128x_VP(56) )
DECLARE_ENUM_VAL(		MPIC128x_VP57,		MPIC128x_VP(57) )
DECLARE_ENUM_VAL(		MPIC128x_VP58,		MPIC128x_VP(58) )
DECLARE_ENUM_VAL(		MPIC128x_VP59,		MPIC128x_VP(59) )
DECLARE_ENUM_VAL(		MPIC128x_VP60,		MPIC128x_VP(60) )
DECLARE_ENUM_VAL(		MPIC128x_VP61,		MPIC128x_VP(61) )
DECLARE_ENUM_VAL(		MPIC128x_VP62,		MPIC128x_VP(62) )
DECLARE_ENUM_VAL(		MPIC128x_VP63,		MPIC128x_VP(63) )
DECLARE_ENUM_VAL(		MPIC128x_VP64,		MPIC128x_VP(64) )
DECLARE_ENUM_VAL(		MPIC128x_VP65,		MPIC128x_VP(65) )
DECLARE_ENUM_VAL(		MPIC128x_VP66,		MPIC128x_VP(66) )
DECLARE_ENUM_VAL(		MPIC128x_VP67,		MPIC128x_VP(67) )
DECLARE_ENUM_VAL(		MPIC128x_VP68,		MPIC128x_VP(68) )
DECLARE_ENUM_VAL(		MPIC128x_VP69,		MPIC128x_VP(69) )
DECLARE_ENUM_VAL(		MPIC128x_VP70,		MPIC128x_VP(70) )
DECLARE_ENUM_VAL(		MPIC128x_VP71,		MPIC128x_VP(71) )
DECLARE_ENUM_VAL(		MPIC128x_VP72,		MPIC128x_VP(72) )
DECLARE_ENUM_VAL(		MPIC128x_VP73,		MPIC128x_VP(73) )
DECLARE_ENUM_VAL(		MPIC128x_VP74,		MPIC128x_VP(74) )
DECLARE_ENUM_VAL(		MPIC128x_VP75,		MPIC128x_VP(75) )
DECLARE_ENUM_VAL(		MPIC128x_VP76,		MPIC128x_VP(76) )
DECLARE_ENUM_VAL(		MPIC128x_VP77,		MPIC128x_VP(77) )
DECLARE_ENUM_VAL(		MPIC128x_VP78,		MPIC128x_VP(78) )
DECLARE_ENUM_VAL(		MPIC128x_VP79,		MPIC128x_VP(79) )
DECLARE_ENUM_VAL(		MPIC128x_VP80,		MPIC128x_VP(80) )
DECLARE_ENUM_VAL(		MPIC128x_VP81,		MPIC128x_VP(81) )
DECLARE_ENUM_VAL(		MPIC128x_VP82,		MPIC128x_VP(82) )
DECLARE_ENUM_VAL(		MPIC128x_VP83,		MPIC128x_VP(83) )
DECLARE_ENUM_VAL(		MPIC128x_VP84,		MPIC128x_VP(84) )
DECLARE_ENUM_VAL(		MPIC128x_VP85,		MPIC128x_VP(85) )
DECLARE_ENUM_VAL(		MPIC128x_VP86,		MPIC128x_VP(86) )
DECLARE_ENUM_VAL(		MPIC128x_VP87,		MPIC128x_VP(87) )
DECLARE_ENUM_VAL(		MPIC128x_VP88,		MPIC128x_VP(88) )
DECLARE_ENUM_VAL(		MPIC128x_VP89,		MPIC128x_VP(89) )
DECLARE_ENUM_VAL(		MPIC128x_VP90,		MPIC128x_VP(90) )
DECLARE_ENUM_VAL(		MPIC128x_VP91,		MPIC128x_VP(91) )
DECLARE_ENUM_VAL(		MPIC128x_VP92,		MPIC128x_VP(92) )
DECLARE_ENUM_VAL(		MPIC128x_VP93,		MPIC128x_VP(93) )
DECLARE_ENUM_VAL(		MPIC128x_VP94,		MPIC128x_VP(94) )
DECLARE_ENUM_VAL(		MPIC128x_VP95,		MPIC128x_VP(95) )
DECLARE_ENUM_VAL(		MPIC128x_VP96,		MPIC128x_VP(96) )
DECLARE_ENUM_VAL(		MPIC128x_VP97,		MPIC128x_VP(97) )
DECLARE_ENUM_VAL(		MPIC128x_VP98,		MPIC128x_VP(98) )
DECLARE_ENUM_VAL(		MPIC128x_VP99,		MPIC128x_VP(99) )
DECLARE_ENUM_VAL(		MPIC128x_VP100,		MPIC128x_VP(100) )
DECLARE_ENUM_VAL(		MPIC128x_VP101,		MPIC128x_VP(101) )
DECLARE_ENUM_VAL(		MPIC128x_VP102,		MPIC128x_VP(102) )
DECLARE_ENUM_VAL(		MPIC128x_VP103,		MPIC128x_VP(103) )
DECLARE_ENUM_VAL(		MPIC128x_VP104,		MPIC128x_VP(104) )
DECLARE_ENUM_VAL(		MPIC128x_VP105,		MPIC128x_VP(105) )
DECLARE_ENUM_VAL(		MPIC128x_VP106,		MPIC128x_VP(106) )
DECLARE_ENUM_VAL(		MPIC128x_VP107,		MPIC128x_VP(107) )
DECLARE_ENUM_VAL(		MPIC128x_VP108,		MPIC128x_VP(108) )
DECLARE_ENUM_VAL(		MPIC128x_VP109,		MPIC128x_VP(109) )
DECLARE_ENUM_VAL(		MPIC128x_VP110,		MPIC128x_VP(110) )
DECLARE_ENUM_VAL(		MPIC128x_VP111,		MPIC128x_VP(111) )
DECLARE_ENUM_VAL(		MPIC128x_VP112,		MPIC128x_VP(112) )
DECLARE_ENUM_VAL(		MPIC128x_VP113,		MPIC128x_VP(113) )
DECLARE_ENUM_VAL(		MPIC128x_VP114,		MPIC128x_VP(114) )
DECLARE_ENUM_VAL(		MPIC128x_VP115,		MPIC128x_VP(115) )
DECLARE_ENUM_VAL(		MPIC128x_VP116,		MPIC128x_VP(116) )
DECLARE_ENUM_VAL(		MPIC128x_VP117,		MPIC128x_VP(117) )
DECLARE_ENUM_VAL(		MPIC128x_VP118,		MPIC128x_VP(118) )
DECLARE_ENUM_VAL(		MPIC128x_VP119,		MPIC128x_VP(119) )
DECLARE_ENUM_VAL(		MPIC128x_VP120,		MPIC128x_VP(120) )
DECLARE_ENUM_VAL(		MPIC128x_VP121,		MPIC128x_VP(121) )
DECLARE_ENUM_VAL(		MPIC128x_VP122,		MPIC128x_VP(122) )
DECLARE_ENUM_VAL(		MPIC128x_VP123,		MPIC128x_VP(123) )
DECLARE_ENUM_VAL(		MPIC128x_VP124,		MPIC128x_VP(124) )
DECLARE_ENUM_VAL(		MPIC128x_VP125,		MPIC128x_VP(125) )
DECLARE_ENUM_VAL(		MPIC128x_VP126,		MPIC128x_VP(126) )
DECLARE_ENUM_VAL(		MPIC128x_VP127,		MPIC128x_VP(127) )

#define					MPIC128x_DST(x)		(0x00010010 + (0x0020*(x))) // MPIC Destination Register
DECLARE_ENUM_VAL(		MPIC128x_DST0,		MPIC128x_DST(0) )
DECLARE_ENUM_VAL(		MPIC128x_DST1,		MPIC128x_DST(1) )
DECLARE_ENUM_VAL(		MPIC128x_DST2,		MPIC128x_DST(2) )
DECLARE_ENUM_VAL(		MPIC128x_DST3,		MPIC128x_DST(3) )
DECLARE_ENUM_VAL(		MPIC128x_DST4,		MPIC128x_DST(4) )
DECLARE_ENUM_VAL(		MPIC128x_DST5,		MPIC128x_DST(5) )
DECLARE_ENUM_VAL(		MPIC128x_DST6,		MPIC128x_DST(6) )
DECLARE_ENUM_VAL(		MPIC128x_DST7,		MPIC128x_DST(7) )
DECLARE_ENUM_VAL(		MPIC128x_DST8,		MPIC128x_DST(8) )
DECLARE_ENUM_VAL(		MPIC128x_DST9,		MPIC128x_DST(9) )
DECLARE_ENUM_VAL(		MPIC128x_DST10,		MPIC128x_DST(10) )
DECLARE_ENUM_VAL(		MPIC128x_DST11,		MPIC128x_DST(11) )
DECLARE_ENUM_VAL(		MPIC128x_DST12,		MPIC128x_DST(12) )
DECLARE_ENUM_VAL(		MPIC128x_DST13,		MPIC128x_DST(13) )
DECLARE_ENUM_VAL(		MPIC128x_DST14,		MPIC128x_DST(14) )
DECLARE_ENUM_VAL(		MPIC128x_DST15,		MPIC128x_DST(15) )
DECLARE_ENUM_VAL(		MPIC128x_DST16,		MPIC128x_DST(16) )
DECLARE_ENUM_VAL(		MPIC128x_DST17,		MPIC128x_DST(17) )
DECLARE_ENUM_VAL(		MPIC128x_DST18,		MPIC128x_DST(18) )
DECLARE_ENUM_VAL(		MPIC128x_DST19,		MPIC128x_DST(19) )
DECLARE_ENUM_VAL(		MPIC128x_DST20,		MPIC128x_DST(20) )
DECLARE_ENUM_VAL(		MPIC128x_DST21,		MPIC128x_DST(21) )
DECLARE_ENUM_VAL(		MPIC128x_DST22,		MPIC128x_DST(22) )
DECLARE_ENUM_VAL(		MPIC128x_DST23,		MPIC128x_DST(23) )
DECLARE_ENUM_VAL(		MPIC128x_DST24,		MPIC128x_DST(24) )
DECLARE_ENUM_VAL(		MPIC128x_DST25,		MPIC128x_DST(25) )
DECLARE_ENUM_VAL(		MPIC128x_DST26,		MPIC128x_DST(26) )
DECLARE_ENUM_VAL(		MPIC128x_DST27,		MPIC128x_DST(27) )
DECLARE_ENUM_VAL(		MPIC128x_DST28,		MPIC128x_DST(28) )
DECLARE_ENUM_VAL(		MPIC128x_DST29,		MPIC128x_DST(29) )
DECLARE_ENUM_VAL(		MPIC128x_DST30,		MPIC128x_DST(30) )
DECLARE_ENUM_VAL(		MPIC128x_DST31,		MPIC128x_DST(31) )
DECLARE_ENUM_VAL(		MPIC128x_DST32,		MPIC128x_DST(32) )
DECLARE_ENUM_VAL(		MPIC128x_DST33,		MPIC128x_DST(33) )
DECLARE_ENUM_VAL(		MPIC128x_DST34,		MPIC128x_DST(34) )
DECLARE_ENUM_VAL(		MPIC128x_DST35,		MPIC128x_DST(35) )
DECLARE_ENUM_VAL(		MPIC128x_DST36,		MPIC128x_DST(36) )
DECLARE_ENUM_VAL(		MPIC128x_DST37,		MPIC128x_DST(37) )
DECLARE_ENUM_VAL(		MPIC128x_DST38,		MPIC128x_DST(38) )
DECLARE_ENUM_VAL(		MPIC128x_DST39,		MPIC128x_DST(39) )
DECLARE_ENUM_VAL(		MPIC128x_DST40,		MPIC128x_DST(40) )
DECLARE_ENUM_VAL(		MPIC128x_DST41,		MPIC128x_DST(41) )
DECLARE_ENUM_VAL(		MPIC128x_DST42,		MPIC128x_DST(42) )
DECLARE_ENUM_VAL(		MPIC128x_DST43,		MPIC128x_DST(43) )
DECLARE_ENUM_VAL(		MPIC128x_DST44,		MPIC128x_DST(44) )
DECLARE_ENUM_VAL(		MPIC128x_DST45,		MPIC128x_DST(45) )
DECLARE_ENUM_VAL(		MPIC128x_DST46,		MPIC128x_DST(46) )
DECLARE_ENUM_VAL(		MPIC128x_DST47,		MPIC128x_DST(47) )
DECLARE_ENUM_VAL(		MPIC128x_DST48,		MPIC128x_DST(48) )
DECLARE_ENUM_VAL(		MPIC128x_DST49,		MPIC128x_DST(49) )
DECLARE_ENUM_VAL(		MPIC128x_DST50,		MPIC128x_DST(50) )
DECLARE_ENUM_VAL(		MPIC128x_DST51,		MPIC128x_DST(51) )
DECLARE_ENUM_VAL(		MPIC128x_DST52,		MPIC128x_DST(52) )
DECLARE_ENUM_VAL(		MPIC128x_DST53,		MPIC128x_DST(53) )
DECLARE_ENUM_VAL(		MPIC128x_DST54,		MPIC128x_DST(54) )
DECLARE_ENUM_VAL(		MPIC128x_DST55,		MPIC128x_DST(55) )
DECLARE_ENUM_VAL(		MPIC128x_DST56,		MPIC128x_DST(56) )
DECLARE_ENUM_VAL(		MPIC128x_DST57,		MPIC128x_DST(57) )
DECLARE_ENUM_VAL(		MPIC128x_DST58,		MPIC128x_DST(58) )
DECLARE_ENUM_VAL(		MPIC128x_DST59,		MPIC128x_DST(59) )
DECLARE_ENUM_VAL(		MPIC128x_DST60,		MPIC128x_DST(60) )
DECLARE_ENUM_VAL(		MPIC128x_DST61,		MPIC128x_DST(61) )
DECLARE_ENUM_VAL(		MPIC128x_DST62,		MPIC128x_DST(62) )
DECLARE_ENUM_VAL(		MPIC128x_DST63,		MPIC128x_DST(63) )
DECLARE_ENUM_VAL(		MPIC128x_DST64,		MPIC128x_DST(64) )
DECLARE_ENUM_VAL(		MPIC128x_DST65,		MPIC128x_DST(65) )
DECLARE_ENUM_VAL(		MPIC128x_DST66,		MPIC128x_DST(66) )
DECLARE_ENUM_VAL(		MPIC128x_DST67,		MPIC128x_DST(67) )
DECLARE_ENUM_VAL(		MPIC128x_DST68,		MPIC128x_DST(68) )
DECLARE_ENUM_VAL(		MPIC128x_DST69,		MPIC128x_DST(69) )
DECLARE_ENUM_VAL(		MPIC128x_DST70,		MPIC128x_DST(70) )
DECLARE_ENUM_VAL(		MPIC128x_DST71,		MPIC128x_DST(71) )
DECLARE_ENUM_VAL(		MPIC128x_DST72,		MPIC128x_DST(72) )
DECLARE_ENUM_VAL(		MPIC128x_DST73,		MPIC128x_DST(73) )
DECLARE_ENUM_VAL(		MPIC128x_DST74,		MPIC128x_DST(74) )
DECLARE_ENUM_VAL(		MPIC128x_DST75,		MPIC128x_DST(75) )
DECLARE_ENUM_VAL(		MPIC128x_DST76,		MPIC128x_DST(76) )
DECLARE_ENUM_VAL(		MPIC128x_DST77,		MPIC128x_DST(77) )
DECLARE_ENUM_VAL(		MPIC128x_DST78,		MPIC128x_DST(78) )
DECLARE_ENUM_VAL(		MPIC128x_DST79,		MPIC128x_DST(79) )
DECLARE_ENUM_VAL(		MPIC128x_DST80,		MPIC128x_DST(80) )
DECLARE_ENUM_VAL(		MPIC128x_DST81,		MPIC128x_DST(81) )
DECLARE_ENUM_VAL(		MPIC128x_DST82,		MPIC128x_DST(82) )
DECLARE_ENUM_VAL(		MPIC128x_DST83,		MPIC128x_DST(83) )
DECLARE_ENUM_VAL(		MPIC128x_DST84,		MPIC128x_DST(84) )
DECLARE_ENUM_VAL(		MPIC128x_DST85,		MPIC128x_DST(85) )
DECLARE_ENUM_VAL(		MPIC128x_DST86,		MPIC128x_DST(86) )
DECLARE_ENUM_VAL(		MPIC128x_DST87,		MPIC128x_DST(87) )
DECLARE_ENUM_VAL(		MPIC128x_DST88,		MPIC128x_DST(88) )
DECLARE_ENUM_VAL(		MPIC128x_DST89,		MPIC128x_DST(89) )
DECLARE_ENUM_VAL(		MPIC128x_DST90,		MPIC128x_DST(90) )
DECLARE_ENUM_VAL(		MPIC128x_DST91,		MPIC128x_DST(91) )
DECLARE_ENUM_VAL(		MPIC128x_DST92,		MPIC128x_DST(92) )
DECLARE_ENUM_VAL(		MPIC128x_DST93,		MPIC128x_DST(93) )
DECLARE_ENUM_VAL(		MPIC128x_DST94,		MPIC128x_DST(94) )
DECLARE_ENUM_VAL(		MPIC128x_DST95,		MPIC128x_DST(95) )
DECLARE_ENUM_VAL(		MPIC128x_DST96,		MPIC128x_DST(96) )
DECLARE_ENUM_VAL(		MPIC128x_DST97,		MPIC128x_DST(97) )
DECLARE_ENUM_VAL(		MPIC128x_DST98,		MPIC128x_DST(98) )
DECLARE_ENUM_VAL(		MPIC128x_DST99,		MPIC128x_DST(99) )
DECLARE_ENUM_VAL(		MPIC128x_DST100,	MPIC128x_DST(100) )
DECLARE_ENUM_VAL(		MPIC128x_DST101,	MPIC128x_DST(101) )
DECLARE_ENUM_VAL(		MPIC128x_DST102,	MPIC128x_DST(102) )
DECLARE_ENUM_VAL(		MPIC128x_DST103,	MPIC128x_DST(103) )
DECLARE_ENUM_VAL(		MPIC128x_DST104,	MPIC128x_DST(104) )
DECLARE_ENUM_VAL(		MPIC128x_DST105,	MPIC128x_DST(105) )
DECLARE_ENUM_VAL(		MPIC128x_DST106,	MPIC128x_DST(106) )
DECLARE_ENUM_VAL(		MPIC128x_DST107,	MPIC128x_DST(107) )
DECLARE_ENUM_VAL(		MPIC128x_DST108,	MPIC128x_DST(108) )
DECLARE_ENUM_VAL(		MPIC128x_DST109,	MPIC128x_DST(109) )
DECLARE_ENUM_VAL(		MPIC128x_DST110,	MPIC128x_DST(110) )
DECLARE_ENUM_VAL(		MPIC128x_DST111,	MPIC128x_DST(111) )
DECLARE_ENUM_VAL(		MPIC128x_DST112,	MPIC128x_DST(112) )
DECLARE_ENUM_VAL(		MPIC128x_DST113,	MPIC128x_DST(113) )
DECLARE_ENUM_VAL(		MPIC128x_DST114,	MPIC128x_DST(114) )
DECLARE_ENUM_VAL(		MPIC128x_DST115,	MPIC128x_DST(115) )
DECLARE_ENUM_VAL(		MPIC128x_DST116,	MPIC128x_DST(116) )
DECLARE_ENUM_VAL(		MPIC128x_DST117,	MPIC128x_DST(117) )
DECLARE_ENUM_VAL(		MPIC128x_DST118,	MPIC128x_DST(118) )
DECLARE_ENUM_VAL(		MPIC128x_DST119,	MPIC128x_DST(119) )
DECLARE_ENUM_VAL(		MPIC128x_DST120,	MPIC128x_DST(120) )
DECLARE_ENUM_VAL(		MPIC128x_DST121,	MPIC128x_DST(121) )
DECLARE_ENUM_VAL(		MPIC128x_DST122,	MPIC128x_DST(122) )
DECLARE_ENUM_VAL(		MPIC128x_DST123,	MPIC128x_DST(123) )
DECLARE_ENUM_VAL(		MPIC128x_DST124,	MPIC128x_DST(124) )
DECLARE_ENUM_VAL(		MPIC128x_DST125,	MPIC128x_DST(125) )
DECLARE_ENUM_VAL(		MPIC128x_DST126,	MPIC128x_DST(126) )
DECLARE_ENUM_VAL(		MPIC128x_DST127,	MPIC128x_DST(127) )

#define                         MPIC128x_IPID(x)    (0x00020040 + (0x1010*(x))) // MPIC Inter processor Interrupt Dispatch
DECLARE_ENUM_VAL(               MPIC128x_IPID0,     MPIC128x_IPID(0) )
DECLARE_ENUM_VAL(               MPIC128x_IPID1,     MPIC128x_IPID(1) )
DECLARE_ENUM_VAL(               MPIC128x_IPID2,     MPIC128x_IPID(2) )
DECLARE_ENUM_VAL(               MPIC128x_IPID3,     MPIC128x_IPID(3) )

DECLARE_ENUM_VAL(               MPIC128x_CTP_PR,    0x00000080 )                // Current Task Priority Register
#define                         MPIC128x_CTP(x)     (0x00020080 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_CTP0,      MPIC128x_CTP(0) )
DECLARE_ENUM_VAL(               MPIC128x_CTP1,      MPIC128x_CTP(1) )
DECLARE_ENUM_VAL(               MPIC128x_CTP2,      MPIC128x_CTP(2) )
DECLARE_ENUM_VAL(               MPIC128x_CTP3,      MPIC128x_CTP(3) )

DECLARE_ENUM_VAL(               MPIC128x_WAI_PR,    0x00000090 )                // Who Am I Register
#define                         MPIC128x_WAI(x)     (0x00020090 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_WAI0,      MPIC128x_WAI(0) )
DECLARE_ENUM_VAL(               MPIC128x_WAI1,      MPIC128x_WAI(1) )
DECLARE_ENUM_VAL(               MPIC128x_WAI2,      MPIC128x_WAI(2) )
DECLARE_ENUM_VAL(               MPIC128x_WAI3,      MPIC128x_WAI(3) )

DECLARE_ENUM_VAL(               MPIC128x_NCIAR_PR,  0x000000A0 )                // Non Critical Interrupt Acknowledge Register
#define                         MPIC128x_NCIAR(x)   (0x000200A0 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_NCIAR0,    MPIC128x_NCIAR(0) )
DECLARE_ENUM_VAL(               MPIC128x_NCIAR1,    MPIC128x_NCIAR(1) )
DECLARE_ENUM_VAL(               MPIC128x_NCIAR2,    MPIC128x_NCIAR(2) )
DECLARE_ENUM_VAL(               MPIC128x_NCIAR3,    MPIC128x_NCIAR(3) )

DECLARE_ENUM_VAL(               MPIC128x_NCEOI_PR,  0x000000B0 )                // Non Critical End of Interrupt Register
#define                         MPIC128x_NCEOI(x)   (0x000200B0 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_NCEOI0,    MPIC128x_NCEOI(0) )
DECLARE_ENUM_VAL(               MPIC128x_NCEOI1,    MPIC128x_NCEOI(1) )
DECLARE_ENUM_VAL(               MPIC128x_NCEOI2,    MPIC128x_NCEOI(2) )
DECLARE_ENUM_VAL(               MPIC128x_NCEOI3,    MPIC128x_NCEOI(3) )

DECLARE_ENUM_VAL(               MPIC128x_CIAR_PR,   0x000000C0 )                // Critical Interrupt Acknowledge Register
#define                         MPIC128x_CIAR(x)    (0x000200C0 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_CIAR0,     MPIC128x_CIAR(0) )
DECLARE_ENUM_VAL(               MPIC128x_CIAR1,     MPIC128x_CIAR(1) )
DECLARE_ENUM_VAL(               MPIC128x_CIAR2,     MPIC128x_CIAR(2) )
DECLARE_ENUM_VAL(               MPIC128x_CIAR3,     MPIC128x_CIAR(3) )

DECLARE_ENUM_VAL(               MPIC128x_CEOI_PR,   0x000000D0 )                // Critical End of Interrupt Register
#define                         MPIC128x_CEOI(x)    (0x000200D0 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_CEOI0,     MPIC128x_CEOI(0) )
DECLARE_ENUM_VAL(               MPIC128x_CEOI1,     MPIC128x_CEOI(1) )
DECLARE_ENUM_VAL(               MPIC128x_CEOI2,     MPIC128x_CEOI(2) )
DECLARE_ENUM_VAL(               MPIC128x_CEOI3,     MPIC128x_CEOI(3) )

DECLARE_ENUM_VAL(               MPIC128x_IAR_PR,    0x000000E0 )                // Machine Check Interrupt Acknowledge Register
#define                         MPIC128x_IAR(x)     (0x000200E0 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_IAR0,      MPIC128x_IAR(0) )
DECLARE_ENUM_VAL(               MPIC128x_IAR1,      MPIC128x_IAR(1) )
DECLARE_ENUM_VAL(               MPIC128x_IAR2,      MPIC128x_IAR(2) )
DECLARE_ENUM_VAL(               MPIC128x_IAR3,      MPIC128x_IAR(3) )

DECLARE_ENUM_VAL(               MPIC128x_EOI_PR,    0x000000F0 )                // Machine Check End of Interrupt Register
#define                         MPIC128x_EOI(x)     (0x000200F0 + (0x1000*(x)))
DECLARE_ENUM_VAL(               MPIC128x_EOI0,      MPIC128x_EOI(0) )
DECLARE_ENUM_VAL(               MPIC128x_EOI1,      MPIC128x_EOI(1) )
DECLARE_ENUM_VAL(               MPIC128x_EOI2,      MPIC128x_EOI(2) )
DECLARE_ENUM_VAL(               MPIC128x_EOI3,      MPIC128x_EOI(3) )

DECLARE_ENUM_VAL(               MPIC128x_FRG0,      0x00001000 )                // Feature Reporting Register 0
DECLARE_ENUM_VAL(               MPIC128x_GCF0,      0x00001020 )                // Global Configuration Register 0
DECLARE_ENUM_VAL(               MPIC128x_VITC,      0x00001040 )                // Vendor Interrupt Type Configuration Register
DECLARE_ENUM_VAL(               MPIC128x_VRID,      0x00001050 )                // Vendor Raw Interrupt Debug Register
DECLARE_ENUM_VAL(               MPIC128x_REVID,     0x00001070 )                // Vendor Soft Core Revision ID Register
DECLARE_ENUM_VAL(               MPIC128x_VIR0,      0x00001080 )                // Vendor Identification Register 0
DECLARE_ENUM_VAL(               MPIC128x_PINI,      0x00001090 )                // Processor Initialization Register

#define                         MPIC128x_IVP(x)     (0x000010A0 + (0x0010*(x))) // IPI Vector/Priority Register
DECLARE_ENUM_VAL(               MPIC128x_IVP0,      MPIC128x_IVP(0) )
DECLARE_ENUM_VAL(               MPIC128x_IVP1,      MPIC128x_IVP(1) )
DECLARE_ENUM_VAL(               MPIC128x_IVP2,      MPIC128x_IVP(2) )
DECLARE_ENUM_VAL(               MPIC128x_IVP3,      MPIC128x_IVP(3) )

DECLARE_ENUM_VAL(               MPIC128x_SPV,       0x000010E0 )                // Spurious Vector Register

DECLARE_ENUM_VAL(               MPIC128x_TFR,       0x000010F0 )                // Timer Frequency Reporting Register

#define                         MPIC128x_TCC(x)     (0x00001100 + (0x0040*(x))) // Timer Current Count Register
DECLARE_ENUM_VAL(               MPIC128x_TCC0,      MPIC128x_TCC(0) )
DECLARE_ENUM_VAL(               MPIC128x_TCC1,      MPIC128x_TCC(1) )
DECLARE_ENUM_VAL(               MPIC128x_TCC2,      MPIC128x_TCC(2) )
DECLARE_ENUM_VAL(               MPIC128x_TCC3,      MPIC128x_TCC(3) )

#define                         MPIC128x_TBC(x)     (0x00001110 + (0x0040*(x))) // Timer Base Count Register
DECLARE_ENUM_VAL(               MPIC128x_TBC0,      MPIC128x_TBC(0) )
DECLARE_ENUM_VAL(               MPIC128x_TBC1,      MPIC128x_TBC(1) )
DECLARE_ENUM_VAL(               MPIC128x_TBC2,      MPIC128x_TBC(2) )
DECLARE_ENUM_VAL(               MPIC128x_TBC3,      MPIC128x_TBC(3) )

#define                         MPIC128x_TVP(x)     (0x00001120 + (0x0040*(x))) // Timer Vector/Priority Register
DECLARE_ENUM_VAL(               MPIC128x_TVP0,      MPIC128x_TVP(0) )
DECLARE_ENUM_VAL(               MPIC128x_TVP1,      MPIC128x_TVP(1) )
DECLARE_ENUM_VAL(               MPIC128x_TVP2,      MPIC128x_TVP(2) )
DECLARE_ENUM_VAL(               MPIC128x_TVP3,      MPIC128x_TVP(3) )

#define                         MPIC128x_TDST(x)    (0x00001130 + (0x0040*(x))) // Timer n Destination Register
DECLARE_ENUM_VAL(               MPIC128x_TDST0,     MPIC128x_TDST(0) )
DECLARE_ENUM_VAL(               MPIC128x_TDST1,     MPIC128x_TDST(1) )
DECLARE_ENUM_VAL(               MPIC128x_TDST2,     MPIC128x_TDST(2) )
DECLARE_ENUM_VAL(               MPIC128x_TDST3,     MPIC128x_TDST(3) )
END_ENUM( MPIC128x_REG )


BEGIN_ENUM( MPIC128x_REG_DFLT )
DECLARE_ENUM_VAL(   MPIC128x_VP_DFLT,       ( reg_field(8,1) | reg_field(0,1) ) )
DECLARE_ENUM_VAL(   MPIC128x_DST_DFLT,      0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_CTP_DFLT,      0x0000000F )
#define             MPIC128x_WAI_DFLT       SPR_PIR_read() //TODO: check this value
DECLARE_ENUM_VAL(   MPIC128x_SPV_DFLT,      reg_field(31,0xFF) )
DECLARE_ENUM_VAL(   MPIC128x_NCIAR_DFLT,    MPIC128x_SPV_DFLT )
DECLARE_ENUM_VAL(   MPIC128x_NCEOI_DFLT,    0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_CIAR_DFLT,     MPIC128x_SPV_DFLT )
DECLARE_ENUM_VAL(   MPIC128x_CEOI_DFLT,     0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_IAR_DFLT,      MPIC128x_SPV_DFLT )
DECLARE_ENUM_VAL(   MPIC128x_EOI_DFLT,      0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_FRG0_DFLT,     ( reg_field(31,2) | reg_field(23,3) | reg_field(15,127) ) )
DECLARE_ENUM_VAL(   MPIC128x_GCF0_DFLT,     reg_field(31,0xF) )
DECLARE_ENUM_VAL(   MPIC128x_VITC_DFLT,     ( reg_field(31,0x10) | reg_field(23,0x10) ) )
DECLARE_ENUM_VAL(   MPIC128x_VRID_DFLT,     0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_REVID_DFLT,    0x00000103 ) //??? TODO: check this dummy-value
DECLARE_ENUM_VAL(   MPIC128x_VIR0_DFLT,     0x00005014 ) //set acc. to STRAP-pins
DECLARE_ENUM_VAL(   MPIC128x_PINI_DFLT,     0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_IVP_DFLT,      reg_field(0,0x1) )
DECLARE_ENUM_VAL(   MPIC128x_TFR_DFLT,      0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_TCC_DFLT,      0x00000000 )
DECLARE_ENUM_VAL(   MPIC128x_TBC_DFLT,      reg_field(0,0x1) )
DECLARE_ENUM_VAL(   MPIC128x_TVP_DFLT,      reg_field(0,0x1) )
DECLARE_ENUM_VAL(   MPIC128x_TDST_DFLT,     0x00000000 )
END_ENUM( MPIC128x_REG_DFLT )


#endif // REGS_MPIC_H

